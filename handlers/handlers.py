from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from database.database import SessionLocal, Base, engine
from models.models import User, Task, Report
from utils.utils import is_admin, send_task_notification

from datetime import datetime
import matplotlib.pyplot as plt
from collections import Counter
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
import pytz

# –ë–∏—à–∫–µ–∫ —É–±–∞–∫—ã—Ç –∑–æ–Ω–∞—Å—ã
kz_tz = pytz.timezone("Asia/Bishkek")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
dp = Dispatcher()
Base.metadata.create_all(bind=engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AssignTask(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_task_text = State()

class DoneTask(StatesGroup):
    waiting_for_task_id = State()

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_handler(message: Message):
    session = SessionLocal()
    try:
        user = session.query(User).filter(User.user_id == message.from_user.id).first()
        if not user:
            is_admin_flag = True if message.from_user.id == 757804536 else False
            full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
            user = User(
                user_id=message.from_user.id,
                username=message.from_user.username,
                full_name=full_name,
                is_admin=is_admin_flag
            )
            session.add(user)
            session.commit()
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu.")
    finally:
        session.close()


# –ú–µ–Ω—é
@dp.message(Command("menu"))
async def show_menu(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìå –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (/assign)")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (/done)")],
            [KeyboardButton(text="üóí –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è (/mytasks)"), KeyboardButton(text="üìä –û—Ç—á—ë—Ç (/report)")],
            [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (/users)")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "üìå –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (/assign)")
@dp.message(Command("assign"))
async def assign_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(AssignTask.waiting_for_user_id)

@dp.message(AssignTask.waiting_for_user_id)
async def assign_user_id_input(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        await state.set_state(AssignTask.waiting_for_task_text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")

@dp.message(AssignTask.waiting_for_task_text)
async def assign_task_text_input(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    task_text = message.text
    file_id = message.document.file_id if message.document else None

    session = SessionLocal()
    try:
        user = session.query(User).filter(User.user_id == user_id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        task = Task(description=task_text, assigned_to_user_id=user_id)
        if file_id:
            task.document_file_id = file_id

        session.add(task)
        session.commit()

        if file_id:
            await message.bot.send_document(
                user_id,
                file_id,
                caption=f"üÜï –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (ID: {task.task_id}):\n{task_text}"
            )
        else:
            await send_task_notification(message.bot, user_id, task)

        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: user_id {user_id} (ID: {task.task_id})")
    finally:
        session.close()
    await state.clear()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (/done)")
@dp.message(Command("done"))
async def done_start(message: Message, state: FSMContext):
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (task_id):")
    await state.set_state(DoneTask.waiting_for_task_id)

@dp.message(DoneTask.waiting_for_task_id)
async def done_get_task_id(message: Message, state: FSMContext):
    try:
        task_id = int(message.text)
        session = SessionLocal()
        try:
            task = session.query(Task).filter(
                Task.task_id == task_id,
                Task.assigned_to_user_id == message.from_user.id
            ).first()

            if not task:
                await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–º.")
                return

            # –ë–∏—à–∫–µ–∫ —É–±–∞–∫—Ç—ã—Å—ã
            task.status = 'done'
            task.done_at = datetime.now(kz_tz)

            # ‚úÖ full_name –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Å—ã
            full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()

            report = Report(
                task_id=task.task_id,
                user_id=message.from_user.id,
                report_text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ.",
                created_at=datetime.now(kz_tz)
            )
            session.add(report)
            session.commit()

            await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {task_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
        finally:
            session.close()
        await state.clear()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π task_id (—á–∏—Å–ª–æ).")

# –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "üóí –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è (/mytasks)")
@dp.message(Command("mytasks"))
async def mytasks_handler(message: Message):
    session = SessionLocal()
    try:
        tasks = session.query(Task).filter(Task.assigned_to_user_id == message.from_user.id).all()
        if not tasks:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")
        else:
            text = "üìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
            for t in tasks:
                text += f"ID: {t.task_id}, –°—Ç–∞—Ç—É—Å: {t.status}, –¢–µ–∫—Å—Ç: {t.description}\n"
            await message.answer(text)
    finally:
        session.close()

# –û—Ç—á–µ—Ç
@dp.message(F.text == "üìä –û—Ç—á—ë—Ç (/report)")
@dp.message(Command("report"))
async def report_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return

    session = SessionLocal()
    try:
        tasks = session.query(Task).all()
        if not tasks:
            await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        done_tasks = [t for t in tasks if t.status == 'done' and t.done_at]
        dates = [t.done_at.astimezone(kz_tz).date() for t in done_tasks]
        counter = Counter(dates)
        dates_sorted = sorted(counter.keys())
        counts = [counter[d] for d in dates_sorted]

        if counts:
            plt.figure(figsize=(8, 4))
            plt.bar([d.strftime("%Y-%m-%d") for d in dates_sorted], counts)
            plt.title("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–∞–º")
            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.savefig("report.png")
            plt.close()
        else:
            plt.figure(figsize=(6, 3))
            plt.text(0.5, 0.5, "–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", fontsize=14, ha='center')
            plt.axis('off')
            plt.savefig("report.png")
            plt.close()

        # Excel –æ—Ç—á–µ—Ç
        wb = Workbook()
        sheet = wb.active
        sheet.title = "–û—Ç—á—ë—Ç—ã"

        headers = [
            "ID –∑–∞–¥–∞–Ω–∏—è", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è",
            "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
        ]
        sheet.append(headers)

        for task in tasks:
            done_at = (
                task.done_at.astimezone(kz_tz).strftime("%Y-%m-%d %H:%M:%S")
                if task.done_at else ""
            )
            created_at = (
                task.created_at.astimezone(kz_tz).strftime("%Y-%m-%d %H:%M:%S")
                if task.created_at else ""
            )

            user = session.query(User).filter(User.user_id == task.assigned_to_user_id).first()
            username = f"@{user.username}" if user and user.username else user.full_name if user and user.full_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            sheet.append([
                task.task_id,
                task.assigned_to_user_id or "",
                username,
                task.description or "",
                "–∑–∞–≤–µ—Ä—à–µ–Ω–æ" if task.status == 'done' else "–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                done_at,
                created_at
            ])

        for col in sheet.columns:
            max_length = max(len(str(cell.value)) if cell.value else 0 for cell in col)
            col_letter = get_column_letter(col[0].column)
            sheet.column_dimensions[col_letter].width = max_length + 2

        excel_path = "reports.xlsx"
        wb.save(excel_path)

        await message.bot.send_photo(
            message.chat.id,
            FSInputFile("report.png"),
            caption="üìä –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"
        )
        await message.bot.send_document(
            message.chat.id,
            FSInputFile(excel_path),
            caption="üìÅ –ü–æ–ª–Ω—ã–π Excel-–æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    finally:
        session.close()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (/users)")
@dp.message(Command("users"))
async def users_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return

    session = SessionLocal()
    try:
        users = session.query(User).all()
        if not users:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for u in users:
                name = f"@{u.username}" if u.username else "(–±–µ–∑ username)"
                text += f"ID: {u.user_id}, Username: {name}, –ê–¥–º–∏–Ω: {u.is_admin}\n"
            await message.answer(text)
    finally:
        session.close()
